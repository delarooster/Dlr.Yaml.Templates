name: Deploy

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      bicepTemplatePath:
        description: 'The path to the top-level bicep template, e.g. main.bicep'
        default: env/main.bicep
        type: string
      additionalBicepParameters:
        default: ''
        type: string
      clientAffix:
        required: true
        type: string
      env:
        default: Dv
        type: string
      resourceGroup:
        type: string
        required: true
      resourceGroupLocation:
        type: string
        default: 'eastus'
      variablesYamlPath:
        type: string
        default: './pipelines/variables.yaml'
      vmImage:
        type: string
        default: 'ubuntu-latest'

jobs:
  deploy:
    runs-on: ${{ inputs.vmImage }}
    defaults:
      run:
        shell: pwsh
    steps:
      # Checkout the repo
      - uses: actions/checkout@v2
      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          # Credentials inherited from parent workflow
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Read YAML variables
        uses: pietrobolcato/action-read-yaml@1.0.0
        id: yaml-data
        with:
          config: ${{ inputs.variablesYamlPath }}
      - run: |
          az account show
          az group create --name ${{ inputs.resourceGroup }} --location ${{ inputs.resourceGroupLocation }}
      - name: Get current time        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD-HH

      # - name: Deploy Bicep Template
      #   uses: azure/arm-deploy@v1
      #   id: bicep-deploy
      #   with:
      #     subscriptionId: ${{ steps.yaml-data.outputs['subscriptionId'] }}
      #     scope: resourcegroup
      #     resourceGroupName: ${{ inputs.resourceGroup }}
      #     template: ${{ inputs.bicepTemplatePath }}
      #     failOnStdErr: false
      #     parameters: >
      #       clientAffix=${{ steps.yaml-data.outputs['clientAffix'] }}
      #       projectAffix=${{ steps.yaml-data.outputs['projectAffix'] }}
      #       env=${{ steps.yaml-data.outputs['env'] }}
      #       ${{ inputs.additionalBicepParameters }}

      - name: Deploy Bicep Template
        id: bicep-deploy
        run: |
          $currentTime = ${{ steps.current-time.outputs.time }}.Replace(":", "-")
          Write-Host "CURRENT_TIME=$currentTime" >> "$GITHUB_OUTPUT"

          az --version
          az deployment group create `
            --resource-group ${{ inputs.resourceGroup }} `
            --name azuredeploy-$($currentTime) `
            --template-file ${{ inputs.bicepTemplatePath }} `
            --parameters `
              clientAffix=${{ steps.yaml-data.outputs['clientAffix'] }} `
              env=${{ steps.yaml-data.outputs['env'] }} `
              projectAffix=${{ steps.yaml-data.outputs['projectAffix'] }} `
              ${{ inputs.additionalBicepParameters }}
          
      # - name: 'Capture Bicep Outputs'
      #   run: |
      #     $outputs = '${{ toJson(steps.bicep-deploy.outputs) }}' -replace '"','\"'
      #     $outputsObj = $outputs | ConvertFrom-Json
      #     Write-Host "Deployment Outputs:"
      #     Write-Host "Number of outputs: " ($outputsObj.PSObject.Properties.Name).Count
      #     foreach ($output in $outputsObj.PSObject.Properties) {
      #       Write-Host "$($output.Name): $($output.Value)"
      #     }
      #   shell: pwsh
      
      - name: 'Capture Bicep Outputs'
        run: |
          $currentTime = ${{ steps.current-time.outputs.time }}
          $out = az deployment group show -g ${{ inputs.resourceGroup }} -n azuredeploy-${{ steps.bicep-deploy.outputs.CURRENT_TIME }} | convertfrom-json | foreach properties | foreach outputs
          if($out -ne $null)
          {
              $provisionOutputs = [PSCustomObject]@{}
              $out | Get-Member -MemberType NoteProperty | ForEach-Object {
              $name = $_.name
              $provisionOutputs | Add-Member -MemberType NoteProperty -Name $name -value $out.$name.value
              Write-Host "BICEP output key/value -> $($name): $($out.$name.value)"
              Write-Host "$($name)=$($out.$name.value)" >> "$GITHUB_OUTPUT"
              }
          }
          else {
              Write-Host "BICEP outputs are null"
          }