name: Build Terraform

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      workingDirectory:
        description: "The path to the intended workspace, e.g. main.tf"
        default: ./env
        type: string
      additionalTerraformParameters:
        default: ""
        type: string
      resourceGroup:
        type: string
        required: true
      resourceGroupLocation:
        type: string
        default: "eastus"
      targetEnvironment:
        type: string
        default: "dv"
      terraformVersion:
        type: string
        default: 1.5.7
      variablesYamlPath:
        type: string
        default: "./pipelines/variables.yaml"
      vmImage:
        type: string
        default: "ubuntu-latest"

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate.
env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"

jobs:
  build-terraform:
    name: "Init and Plan Terraform"
    runs-on: ${{ inputs.vmImage }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      # TODO fix hardcoded state file key name below
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        run: |
          terraform init -backend-config="resource_group_name=$RESOURCE_GROUP" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="key=dvgithubstatefiles"
        working-directory: ${{ inputs.workingDirectory }}

      - name: Terraform Format
        run: terraform fmt -recursive -diff -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -var-file="variables/${{ inputs.targetEnvironment }}.tfvars" -detailed-exitcode -out ${{ inputs.targetEnvironment }}.tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
        working-directory: ${{ inputs.workingDirectory }}

      - run: |
          ls -la
          # Check if 'plans/' directory exists; if not, create it
          [ -d "plans/" ] || mkdir plans/

          # Loop through all .tfplan files and move them to the 'plans/' directory
          for file in *.tfplan; do
            mv "$file" plans/
          done

          cd plans/
          ls -la
          echo "All .tfplan files have been moved to the plans/ directory."
        name: Stage Plans Directory

      - uses: actions/upload-artifact@v3
        with:
          name: terraform-plans
          path: plans/
